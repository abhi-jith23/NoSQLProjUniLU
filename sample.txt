import tkinter as tk
from tkinter import Text
from pymongo import MongoClient
from neo4j import GraphDatabase
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# MongoDB and Neo4j connection details
MONGO_URI = "mongodb://localhost:27017"
NEO4J_URI = "bolt://localhost:7687"
NEO4J_AUTH = ("neo4j", "12341234")  # Replace "password" with your Neo4j password

# Global variables for zooming
zoom_factor = 1.0
canvas = None

# MongoDB query function
def query_mongo(query):
    """Query MongoDB for partial matches."""
    try:
        client = MongoClient(MONGO_URI)
        db = client["NoSQLProj"]  # Replace with your MongoDB database name
        collection = db["MoodleDB"]  # Replace with your MongoDB collection name

        # MongoDB regex query for partial matches
        regex_query = {"$or": [
            {"Entry": {"$regex": query, "$options": "i"}},
            {"Entry Name": {"$regex": query, "$options": "i"}},
            {"Gene Names": {"$regex": query, "$options": "i"}},
            {"Protein names": {"$regex": query, "$options": "i"}}
        ]}

        result = collection.find_one(regex_query)
        if result:
            # Format and return the result, excluding EC numbers and InterPro
            return (f"MongoDB Result:\n"
                    f"Entry: {result.get('Entry', '')}\n"
                    f"Entry Name: {result.get('Entry Name', '')}\n"
                    f"Protein Names: {result.get('Protein names', '')}\n"
                    f"Gene Names: {result.get('Gene Names', '')}\n"
                    f"Organism: {result.get('Organism', '')}")
        else:
            return "MongoDB Result: No data found for the given query."
    except Exception as e:
        return f"MongoDB Result: Connection failed - {e}"

# Neo4j query function for graph data
def query_neo4j_graph(query):
    """Query Neo4j for graph data."""
    try:
        driver = GraphDatabase.driver(NEO4J_URI, auth=NEO4J_AUTH)
        with driver.session() as session:
            # Fetch nodes and relationships for the graph
            result = session.run(
                """
                MATCH (n)-[r]->(m)
                WHERE n.entry =~ '(?i).*' + $query + '.*' 
                      OR n.entryName =~ '(?i).*' + $query + '.*' 
                      OR n.proteinNames =~ '(?i).*' + $query + '.*'
                RETURN n, r, m
                """, query=query
            )
            nodes, edges = set(), []
            for record in result:
                n = record["n"]
                m = record["m"]
                r = record["r"]
                nodes.add((n["entry"], n["entryName"]))
                nodes.add((m["entry"], m["entryName"]))
                edges.append((n["entry"], m["entry"], r["weight"] if "weight" in r else 1))
            return nodes, edges
    except Exception as e:
        print(f"Neo4j graph query failed: {e}")
        return set(), []

# Graph rendering function
def draw_graph(nodes, edges):
    """Draw the graph using NetworkX and Matplotlib."""
    global canvas, zoom_factor

    # Clear existing graph
    for widget in graph_frame.winfo_children():
        widget.destroy()

    # Create a NetworkX graph
    G = nx.DiGraph()
    for node in nodes:
        G.add_node(node[0], label=node[1])
    for edge in edges:
        G.add_edge(edge[0], edge[1], weight=edge[2])

    # Create a Matplotlib figure
    fig, ax = plt.subplots(figsize=(8 * zoom_factor, 6 * zoom_factor))
    pos = nx.spring_layout(G)  # Use spring layout for graph positioning

    # Draw the graph
    nx.draw_networkx_nodes(G, pos, ax=ax, node_size=500, node_color="skyblue")
    nx.draw_networkx_edges(G, pos, ax=ax, arrowstyle="->", arrowsize=20)
    nx.draw_networkx_labels(G, pos, ax=ax, labels={n: n for n in G.nodes})
    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, ax=ax)

    ax.axis("off")  # Turn off the axis

    # Embed the Matplotlib figure in tkinter
    canvas = FigureCanvasTkAgg(fig, master=graph_frame)
    canvas_widget = canvas.get_tk_widget()
    canvas_widget.pack(fill=tk.BOTH, expand=True)
    canvas.draw()

# Zoom functions
def zoom_in():
    """Zoom in the graph."""
    global zoom_factor
    zoom_factor += 0.2
    draw_graph(current_nodes, current_edges)

def zoom_out():
    """Zoom out the graph."""
    global zoom_factor
    zoom_factor = max(0.2, zoom_factor - 0.2)
    draw_graph(current_nodes, current_edges)

# Execute query function
def execute_query():
    """Execute the query and update MongoDB, Neo4j results, and the graph."""
    global current_nodes, current_edges

    query = query_entry.get().strip()
    if not query:
        return

    # Query MongoDB
    mongo_result_text = query_mongo(query)
    mongo_result.config(state="normal")
    mongo_result.delete(1.0, tk.END)
    mongo_result.insert(tk.END, mongo_result_text)
    mongo_result.config(state="disabled")

    # Query Neo4j for graph data
    current_nodes, current_edges = query_neo4j_graph(query)
    draw_graph(current_nodes, current_edges)

# Create the main window
root = tk.Tk()
root.title("Protein Query Interface")
root.geometry("1200x800")
root.minsize(800, 600)

# Adjust left-right proportions
root.rowconfigure(0, weight=1)
root.columnconfigure(0, weight=40)
root.columnconfigure(1, weight=60)

# Left frame
left_frame = tk.Frame(root, bd=2, relief=tk.SUNKEN)
left_frame.grid(row=0, column=0, sticky="nsew")
left_frame.columnconfigure(0, weight=1)
left_frame.rowconfigure([1, 2, 3], weight=1)

# Right frame (graph display)
graph_frame = tk.Frame(root, bd=2, relief=tk.SUNKEN)
graph_frame.grid(row=0, column=1, sticky="nsew")
graph_frame.columnconfigure(0, weight=1)
graph_frame.rowconfigure(1, weight=1)

# Input box
query_label = tk.Label(left_frame, text="Type in the protein or entry or gene name you want to query:")
query_label.grid(row=0, column=0, sticky="w", padx=5, pady=5)

query_frame = tk.Frame(left_frame)
query_frame.grid(row=0, column=0, sticky="ew", padx=5)

query_entry = tk.Entry(query_frame, width=40)
query_entry.grid(row=0, column=0, sticky="ew")

search_button = tk.Button(query_frame, text="Search", command=execute_query)
search_button.grid(row=0, column=1, padx=5)

# MongoDB result box
mongo_label = tk.Label(left_frame, text="MongoDB Result:")
mongo_label.grid(row=1, column=0, sticky="w", padx=5)

mongo_result = Text(left_frame, wrap="word", height=10, state="disabled", width=50)
mongo_result.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

# Neo4j result box
neo4j_label = tk.Label(left_frame, text="Neo4J Result:")
neo4j_label.grid(row=2, column=0, sticky="w", padx=5)

neo4j_result = Text(left_frame, wrap="word", height=10, state="disabled", width=50)
neo4j_result.grid(row=2, column=0, sticky="nsew", padx=5, pady=5)

# Add zoom buttons
zoom_in_button = tk.Button(graph_frame, text="+", font=("Arial", 12), width=2, command=zoom_in)
zoom_in_button.pack(side=tk.RIGHT, padx=5, pady=5)

zoom_out_button = tk.Button(graph_frame, text="-", font=("Arial", 12), width=2, command=zoom_out)
zoom_out_button.pack(side=tk.RIGHT, padx=5, pady=5)

# Initialize empty graph
current_nodes, current_edges = set(), []
draw_graph(current_nodes, current_edges)

root.mainloop()
